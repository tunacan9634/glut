// Rem output with px fallback
@mixin font-size($sizeValue: 1) {
	font-size: ($sizeValue * 15) * 1px;
	// font-size: $sizeValue * 1rem;
	@include mq-md {
		font-size: ($sizeValue * 16) * 1px;
	}
}

// Center block
@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// Clearfix
@mixin clearfix() {
	content: "";
	display: table;
	table-layout: fixed;
	clear: both;
}

// Clear after (not all clearfix need this also)
@mixin clearfix-after() {
	clear: both;
}

// Column width with margin
@mixin column-width($numberColumns: 3) {
	width: map-get( $columns, $numberColumns ) - ( ( $columns__margin * ( $numberColumns - 1 ) ) / $numberColumns );
}

//Media Queries
@mixin mq-xs($val: $sm-width){
    @media only screen and (max-width: #{$val - 1}) {
        @content;
    }
}

//Media Queries
@mixin mq-sm($val: $sm-width){
    @media only screen and (min-width: #{$val}) {
        @content;
    }
}

//Media Queries
@mixin mq-md($val: $md-width){
    @media only screen and (min-width: #{$val}) {
        @content;
    }
}

//Media Queries
@mixin mq-lg($val: $lg-width) {
    @media only screen and (min-width: #{$val}) {
        @content;
    }
}

//Media Queries
@mixin mq-xl($val: $xl-width) {
    @media only screen and (min-width: #{$val}) {
        @content;
    }
}

//Media Queries
@mixin mq-xxl($val: $xxl-width) {
  @media only screen and (min-width: #{$val}) {
      @content;
  }
}

//特定の親セレクタの状態を変更するmixin
//参照 https://hirakublog.com/code/342/
//指定したclassがネスト内にあるかチェック
@function is-inside($target) {
  @return if("#{selector-replace(&, $target, ".replaced")}" != "#{&}", true, false);
}

//ネストされたセレクターの直前の親セレクターを取得する関数
//.hoge .hoge__box だと .hoge__box を取得
@function parent($value) {
  $selector: $value;
  $array: "";
  $space: if(str-index($selector, " "), str-index($selector, " "), 0);//セレクターのスペースの位置を保存※スペースがなければ0

  //セレクターにスペースがあれば繰り返し
  @while $space > 0 {
    $selector: str-insert($selector, ',', $space);//スペースの位置に,（カンマ）を挿入
    $array: selector-parse($selector);//配列に変換
    //  // $l: length($array);
    $selector: #{nth($array, length($array))};//配列の最後を取得
    $space: if(str-index($selector, " "), str-index($selector, " "), 0);//セレクターのスペースの位置を保存※スペースがなければ0
  }
  @return "#{$selector}";
}

@mixin state ($target, $state) {
  //ネストの外か内を判定
  @if is-inside($target) {
    @at-root #{selector-replace(&, $target, $target + $state)} {
      @content
    }
  } @else {
    @if $target == parent(#{&})  {
      @at-root #{selector-replace(&, parent(#{&}), $target + $state)} {
        @content
      }
    } @else {
      @at-root #{selector-replace(&, parent(#{&}), $target + $state + " " + parent(#{&}))} {
        @content
      }
    }
  }
}
